<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation=" 
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
	http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-2.1.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd 
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd 
	http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd 
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<!-- Spring AOP auto-proxy creation (required to support Shiro annotations) -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" />

	<!-- ========================================================= Shiro Components ========================================================= -->

	<!-- Shiro's main business-tier object for web-enabled applications (use org.apache.shiro.web.mgt.DefaultWebSecurityManager 
		instead when there is no web environment) -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- Single realm app (realm configured next, below). If you have multiple realms, use the 'realms' property instead. -->
		<property name="realm" ref="shiroRealm" />
		<!-- Uncomment this next property if you want heterogenous session access or clusterable/distributable sessions. The default 
			value is 'http' which uses the Servlet container's HttpSession as the underlying Session implementation. -->
		<!-- <property name="sessionMode" value="native" /> -->
	</bean>

	<!-- Post processor that automatically invokes init() and destroy() methods -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<!-- Define the Shiro Filter here (as a FactoryBean) instead of directly in web.xml - web.xml uses the DelegatingFilterProxy 
		to access this bean. This allows us to wire things with more control as well utilize nice Spring things such as PropertiesPlaceholderConfigurer 
		and abstract beans or anything else we might need: -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/login" />
		<property name="successUrl" value="/home" />
		<property name="unauthorizedUrl" value="/unauthorized" />
		<!-- The 'filters' property is usually not necessary unless performing an override, which we want to do here (make authc 
			point to a PassthruAuthenticationFilter instead of the default FormAuthenticationFilter: -->
		<property name="filters">
			<util:map>
				<entry key="authc">
					<!--<bean class="org.apache.shiro.web.filter.authc.PassThruAuthenticationFilter"/> -->
					<bean class="au.com.isell.rlm.module.user.web.shiro.CustomAuthFilter" />
				</entry>
			</util:map>
		</property>
		<property name="filterChainDefinitions">
			<value>
				/login = anon
				/portal = anon
				/security/password/* = anon
				/timezone.* = anon
				/init.* = anon
				/init/** = anon
				/style/** = anon
				/media/** = anon
				/js/** = anon
				/account/manage-user = perms[user:manage]
				/** = authc
			</value>
		</property>
	</bean>
</beans>
